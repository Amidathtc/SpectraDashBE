.
├── app.js
├── models
│   └── user.js
├── controllers
│   └── userController.js
├── routes
│   └── userRoutes.js
└── middlewares
    ├── passwordHasher.js
    └── inputValidator.js

    Here's an enhanced version of the code that incorporates the suggested improvements for security, error handling, and input validation:

#### app.ts

```typescript
import express, { Request, Response, NextFunction } from 'express';
import session from 'express-session';
import MongoStore from 'connect-mongo';
import dotenv from 'dotenv';
import bcrypt from 'bcrypt';
import { body, validationResult } from 'express-validator';
import UserController from './controller/user.controller';

// Load environment variables from .env file
dotenv.config();

// Initialize Express app
const app = express();

// Set up view engine
app.set('view engine', 'ejs');

// Set up session management
const sessionStore = MongoStore.create({
  mongoUrl: process.env.MONGODB_URI,
  collectionName: 'sessions',
});
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
    store: sessionStore,
    cookie: { secure: true, httpOnly: true },
  })
);

// Set up input validation
const validateRegistrationInput = [
  body('name').notEmpty().withMessage('Name is required'),
  body('email').isEmail().withMessage('Invalid email address'),
  body('password')
    .isLength({ min: 8 })
    .withMessage('Password must be at least 8 characters long'),
];

// Set up routes
app.get('/', (req: Request, res: Response) => {
  res.render('index');
});

app.post(
  '/register',
  validateRegistrationInput,
  UserController.createAdmin
);

app.post('/login', UserController.loginAdmin);
app.get('/logout', UserController.logoutAdmin);

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
});
```

#### controller/user.controller.ts

```typescript
import { Request, Response, NextFunction } from 'express';
import UserModel, { IUser } from '../models/user.model';
import { MainAppError } from '../utils/appError';
import { HTTPCODES } from '../utils/httpCodes';

export const createAdmin = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return next(
        new MainAppError({
          message: errors.array()[0].msg,
          httpcode: HTTPCODES.BAD_REQUEST,
        })
      );
    }

    const checkIfExist = await UserModel.findOne({
      email: process.env.AdminEmail,
    });

    if (checkIfExist) {
      return next(
        new MainAppError({
          message: 'Admin Already Exist',
          httpcode: HTTPCODES.BAD_REQUEST,
        })
      );
    }

    const hashedPassword = await bcrypt.hash(
      process.env.AdminPassword,
      10
    );

    await UserModel.create({
      name: process.env.AdminName,
      email: process.env.AdminEmail,
      password: hashedPassword,
    });

    res.status(HTTPCODES.OK).json({
      message: 'Created',
      status: true,
    });
  } catch (error) {
    return res.status(HTTPCODES.BAD_REQUEST).json({
      message: 'An Error Occured in createAdmin',
      error: error,
    });
  }
};

export const loginAdmin = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { email, password } = req.body;
    const getUser = await UserModel.findOne({
      email,
    });

    if (!getUser) {
      return next(
        new MainAppError({
          message: 'User not found for the provided email address.',
          httpcode: HTTPCODES.BAD_REQUEST,
        })
      );
    }

    const isPasswordValid = await bcrypt.compare(
      password,
      getUser.password
    );

    if (!isPasswordValid) {
      return next(
        new MainAppError({
          message: 'Wrong Password',
          httpcode: HTTPCODES.BAD_REQUEST,
        })
      );
    }

    req.session.user = getUser._id;

    res.status(HTTPCODES.OK).json({
      message: 'Login Successful',
      data: getUser._id,
    });
  } catch (error) {
    return res.status(HTTPCODES.BAD_REQUEST).json({
      message: 'An Error Occured in loginAdmin',
      error: error,
    });
  }
};

export const logoutAdmin = (req: Request, res: Response, next: NextFunction) => {
  try {
    req.session = null;

    res.status(HTTPCODES.OK).json({
      message: 'Logout Successful',
    });
  } catch (error) {
    return res.status(HTTPCODES.BAD_REQUEST).json({
      message: 'An Error Occured in logoutAdmin',
      error: error,
    });
  }
};
```

This version of the code incorporates the following improvements:

1. **Environment Variables**: Uses `dotenv` to load environment variables from a `.env` file.
2. **Password Hashing**: Uses `bcrypt` to securely hash passwords before storing them in the database.
3. **Input Validation**: Uses `express-validator` to validate user input.
4. **Session Management**: Sets up secure session options like `secure` and `httpOnly`, and uses `connect-mongo` to store sessions in MongoDB.
5. **Error Handling**: Improves error handling by providing more specific error messages and status codes.
6. **Consistent Request Object**: Uses TypeScript interfaces to define the structure of request objects for better code readability and maintainability.

By incorporating these improvements, you can enhance the security, error handling, and input validation of your Node.js application.





PORT=1200
# MONGO_URL= mongodb+srv://ogunbiyiamidat65:ogunbiyiamidat65@cluster0.tidrfny.mongodb.net/SpectraDash?retryWrites=true&w=majority 

MONGODB_URI= "mongodb://127.0.0.1:27017/SpectraDashBE"
CLOUD_NAME = "dirrncimm"
CLOUD_KEY = "198879469219431"
CLOUD_SECRET = "U8f7b03CiPBWzJJDjVPU_MF5IJM"

G_ID = "350112565242-6vg8nj5odo3p0scscedorsbll9t6u613.apps.googleusercontent.com"
G_SECRET = "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"
G_REFRESH = "1//04CIhzfu8bPUeCgYIARAAGAQSNwF-L9Ir_CY_w6TB_6QNSUxAVlDBGB8CHsLS2b9MixUIwO-secYSvkCCTMgV4d8asYExrzMF5Qo"
G_URL = "https://developers.google.com/oauthplayground"
